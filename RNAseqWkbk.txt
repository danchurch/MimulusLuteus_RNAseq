## let's get started on the RNA seq pipeline for Mlv

## we want to see what the effects of our RNAi silencing 
## were in our plants. 

## siRNA silencing works by silencing targeting mRNA after 
## it leaves the nuclease. So it has been processed into 
## mature RNA etc. 

## I'm not sure how fast acting RNAi is, but we can assume
## that in order to have phenotypic effects it is pretty 
## rapid, and that we see a lower amount of myb5a transcripts
## floating around from RNAi-transformed petals. 

## I do not know how persistent the fragments from RNAi 
## are, they may come into play here, but I presume the 
## the RNAses kick in pretty kick...

## anyway, our most immediate hypothesis is that we will
## see relatively less abundance of myb5a present in this 
## petal tissue. We can then hypothesize that this will
## cascade to lower expression of down stream genes in 
## the petal anthocyanin pathway. 

## more reading is to be done, I'm just not familiar with 
## what we think the mimulus petal anthocyanin pathways. 
## but what we can start to do now is look at our read 
## qualities. 

## to start off, we need to do some quality control, maybe
## trim some BPs, drop off the low quality stuff. 
## fairly familiar territory. 

## Josh's friend Ron still uses fastx for this, I wonder if
## we have another route, I remember fastx having issues 
## with plotting newer illumina read sets...

## let's get all fasta files unzipped and into a useful place:

## we'll put them here on the lab mac:
fastaFolder="/Users/danthomas/Documents/RNAi_Mvar_RNAseq/Mlv_raw_unzipped"

## go to our gz files:

cd /Users/danthomas/Documents/RNAi_Mvar_RNAseq/MlvMnaRNA_raw_compressed

for i in *gz; do
gunzip < $i > $fastaFolder/${i%.gz}
done


## we'll try to do this in the HTseq python package, following
## the examples in their tutorials

## https://htseq.readthedocs.io/en/release_0.10.0/tour.html#reading-in-reads

python3

import HTSeq, os, itertools

import biopython as bio

import matplotlib as plt
import numpy as np

## let's read in our reads:

fastaFolder="/Users/danthomas/Documents/RNAi_Mvar_RNAseq/Mlv_raw_unzipped"
os.chdir(fastaFolder)
fastqFile=os.listdir()[0]

fastq = HTSeq.FastqReader(fastqFile)

for read in itertools.islice(fastq, 10):
    print(read)

## to get average quality at each site:

## make an array as long as the number of bps in our reads:

qualsum = np.zeros( len(read), np.int)
nreads = 0
for read in fastq:
    qualsum += read.qual
    nreads += 1

qualsum / nreads = avgQuals

## etc. But what we want for tonight is a actually 
## a htseq script used from the command line:

#! /usr/bin/env bash

fastaFolder="/Users/danthomas/Documents/RNAi_Mvar_RNAseq/Mlv_raw_unzipped"
wd="/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq"

cd $fastaFolder

for i in *; do
    echo ${i%fastq}_qa.pdf
    htseq-qa -t fastq --nosplit --outfile ${i%fastq}_qa.pdf $i
done


## worked - get those into our repo? 

## confusing, cause we're working remotely in a git repo but 
## were in one locally, and there is a version of this log in 
## both. 

## so keep things separate, I guess. All file updates besides this 
## log will be from the labcomp and all workbook updates from my 
## laptop.

## anyway... 

## check our reads for primers/barcodes?

## for sample S1, our barcodes are GTAACTTGGT+AGACTGCGAA

grep GTAACTTGGT $fastaFolder/4956_S1_S26_L005_R1_001.fastq 
grep AGACTGCGAA $fastaFolder/4956_S1_S26_L005_R1_001.fastq 

## reverse complements
grep ACCAAGTTAC $fastaFolder/4956_S1_S26_L005_R1_001.fastq ## common, but not at the ends..
grep TTCGCAGTCT $fastaFolder/4956_S1_S26_L005_R1_001.fastq ## also common, but not at the ends..

## I think we're clear on that. 

## Reads look good. Except the beginnings BPs are lower quality. 
## but not so bad that we need to trim, I guess. 

## I guess we can take a second look after alignment.

## let's play with hisat2:

curl -O "ftp://ftp.ccb.jhu.edu/pub/infphilo/hisat2/downloads/hisat2-2.1.0-OSX_x86_64.zip"

##################### oops, tomorrow get mac binary ########################################
## our reference genome is at:

/Users/danthomas/Documents/naiandinus_gen/MnaXMlv/luteus_genome/Mimulus_luteus.fasta


genFasta='/Users/danthomas/Documents/naiandinus_gen/MnaXMlv/luteus_genome/Mimulus_luteus.fasta'

## we'll get a local index nearby

refFolder='/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/lutRefGenome'

cd $refFolder

refGenLink='/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/lutRefGenome/Mimulus_luteus.fasta'

## don't know if a symlink will do or not...
ln -s $genFasta $refGenLink

## our HISAT binary is at:

hisatD='/Users/danthomas/hisat2-2.1.0'

## commands for building reference genome:

$hisatD/hisat2-build Mimulus_luteus.fasta mllGen 
## seems to have worked

## script to do all of these...

## RNAalignments.sh
##########################################3
#! /usr/bin/env bash

hisatD='/sciclone/data10/dthomas01/Mll_hisat'
fastaFolder='/sciclone/data10/dthomas01/MimRNAseq_fastq'
refFolder='/sciclone/data10/dthomas01/Mll_hisat'

cd $refFolder

touch align.log

for i in $fastaFolder/*; do
    echo $i
    aa=${i##*/}  
    bb=${aa%.*}
    sa=$bb".sam"
    $hisatD/hisat2 -x mllGen -U $i -S $sa --dta | tee -a align.log
done

##############################################

## to run it:

ssh danthomas@10.4.2.6 'cd /Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq; ./RNAalignments.sh' 

./RNAalignments.sh | tee RNAalign.log


 
$hisatD/hisat2 -x mllGen -U
$hisatD/hisat2-build 

## and for alignment
HISAT2_HOME/hisat2 -f -x $HISAT2_HOME/example/index/22_20-21M_snp -U $HISAT2_HOME/example/reads/reads_1.fa -S eg1.sam


## side note: using aspera to upload to SRA:

ascp -i /Users/danthomas/Documents/RNAi_Mvar_RNAseq/aspera.openssh -QT -l100m -k1 -d /Users/danthomas/Documents/RNAi_Mvar_RNAseq/MlvMnaRNA_raw_compressed/ subasp@upload.ncbi.nlm.nih.gov:uploads/danchurchthomas@gmail.com_NoZoYQba

ls -l /Users/danthomas/Documents/RNAi_Mvar_RNAseq/aspera.openssh


## okay, so now what? How can we check the alignments?

grep "@SQ" 4956_S6_S31_L005_R1_001.sam | wc -l
## don't do that. but SQ should indicate our scaffolds

## how do we find the unaligned reads?

## sams live here:
samDir='/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/SAMs'
bamDir='/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/BAMs'

## go to BAM, sorting as we go

cd $samDir

for i in *; do
    echo $i "   " ${i/\.sam/_sorted\.bam}
    samtools sort -O bam -T "$file" -o $bamDir/${i/\.sam/_sorted\.bam} $i
done

## Works...

## how do we find the level of reads aligned vs. non?

samtools view -f u 4956_S1_S26_L005_R1_001_sorted.bam > notMappedS1.sam

## interesting. but moving on, we have a gff file from coge. Can we use this
## to get counts for our transcripts/genes?

## Ron's final step is to use HTSeq to generate count data:

htseq-count -f bam -i gene_id -t gene -s no "$file" $GFF > "$outfile" 

## I have a lot of questions here, but let's try to get something like this
## running before I dig into the lit a little deeper to answer my questions,
## because this might take some time:


## bam directory is:
bamDir=/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/BAMs
## our gff file from CoGe is symlinked here:
GFF=/Users/danthomas/Documents/RNAi_Mvar_RNAseq/MimulusLuteus_RNAseq/lutRefGenome/Mimulus_luteus_complete_w_single_exons_standard_renamed_genes.gff

cd $bamDir

for i in  $bamDir/*; do 
    echo $i "   " ${i/sorted\.bam/HTSeqCounts.txt} 
    htseq-count -f bam -t exon -i Parent -s no $i $GFF \
            > ${i/sorted\.bam/HTSeqCounts.txt} 
done

## that's saved as 

makeCounts.sh

## let's see how it looks:

## shitty, nothing mapped. absolutely nothing...

## check with SAMtools
samtools flagstat 4956_S1_S26_L005_R1_001.sam ## 76.86 mapped...so what's wrong?

touch samReport.log

for i in *sam; do
echo $i >> samReport.log
samtools flagstat $i >> samReport.log
done

## the gff is failing us here, there aren't real annotations in there. 
## not sure if that's the problem, but it's a start...

## try out the wm cluster

wmStat ## my alias for the stats server that we gotta go through to get to the cluster

## from, let's try the hurricane/whirlwind subcluster

ssh dthomas01@hurricane.sciclone.wm.edu

## not sure how much space I get, but this is home
## /sciclone/home20/dthomas01

## we loaded the luteus genome there, can we also get hisat and cufflinks binaries in there?
## and will it let me put the relatively large index files in there?

wget ftp://ftp.ccb.jhu.edu/pub/infphilo/hisat2/downloads/hisat2-2.1.0-Linux_x86_64.zip
unzip hisat2-2.1.0-Linux_x86_64.zip

## wait on cufflinks. Can we run the indexing as a job? 

## buildG.sh
#############################
#!usr/env/tcsh
#PBS -l walltime=8:00:00
#PBS -N buildG
#PBS -j oe
#PBS -M thomasdc@whitman.edu

cd /sciclone/home20/dthomas01
cd /sciclone/home20/dthomas01

/sciclone/home20/dthomas01/hisat2-2.1.0/hisat2-build mimLuteus_genome.fa mllGen


###

## fails. Let's change some profile stuff.

## home directory is:
/sciclone/home20/dthomas01

## data storage is here:
/sciclone/data10/dthomas01

## scratch is here:
/sciclone/scr01/dthomas01

## let's get the coge annotated genome into my data file...

## and get the read sets... these are on the lab comp....

4956_S1_S26_L005_R1_001.fastq.gz
4956_S2_S27_L005_R1_001.fastq.gz

## okay, let's try stringtie

wmStat
hurr

## where are the binaries?

wget http://ccb.jhu.edu/software/stringtie/dl/stringtie-1.3.4d.Linux_x86_64.tar.gz

## so, we want to run hisat2 on our RNA samples with hisat, 
## then run them all in merge mode with stringtie. 

## first, rebuild the reference genome:

cd /sciclone/data10/dthomas01

/sciclone/home20/dthomas01/hisat2-2.1.0/hisat2-build mimLuteus_genome.fa mllGen

## did that work?
## then run the hisat2 

#########################################

## 7 months later...

## been out of this so long, going to start over. 

## where are our binaries for hisat2?

cd /sciclone/data10/dthomas01

wget http://ccb.jhu.edu/software/hisat2/dl/hisat2-2.1.0-Linux_x86_64.zip

## our genome is where..?

mllGen='/sciclone/data10/dthomas01/rnaseq/mimLuteus_genome.fa'
mllGFF='/sciclone/data10/dthomas01/rnaseq/Mimulus_luteus_complete_w_single_exons_standard_renamed_genes.gff'

## job for the day, align our reads to this genome?

## to do this, need to index the genome:

## binaries for hisat here:
hisat2="/sciclone/data10/dthomas01/hisat2-2.1.0/"

## commands for building reference genome:

qsub -I -l walltime=3:0:0 -l nodes=1:ppn=4

## script for this:

## buildHiSatInd.sh
##################################################
#!/usr/bin/env bash

#PBS -l walltime=6:00:00
#PBS -N buildHiSatIndices
#PBS -l nodes=1:ppn=4

cd /sciclone/data10/dthomas01/rnaseq

hisat2="/sciclone/data10/dthomas01/hisat2-2.1.0/"
mllGen='/sciclone/data10/dthomas01/rnaseq/mimLuteus_genome.fa'
mllHiSatInd='/sciclone/data10/dthomas01/rnaseq/mllHiSat2Indices'

$hisat2/hisat2-build $mllGen mllInd

## 5488962

qstat 5488962

## huh, weird walltime error, didn't I ask for 6 hours?

## anyway, run interactively, works fine. 

## can we start our alignment?

$hisat2"/hisat2" -h | less

$hisat2"/hisat2" -h 

qsub -I -l walltime=3:0:0 -l nodes=1:ppn=4

bash

#!/usr/bin/env bash
#PBS -l walltime=8:00:00
#PBS -N rnaAlignmentsApr23.1030am
#PBS -l nodes=1:ppn=8

cd /sciclone/data10/dthomas01/rnaseq

hisat2="/sciclone/data10/dthomas01/hisat2-2.1.0"
mllGen='/sciclone/data10/dthomas01/rnaseq/mimLuteus_genome.fa'
mllHiSatInd='/sciclone/data10/dthomas01/rnaseq/mllHiSat2Indices'
rnaFastq='/sciclone/data10/dthomas01/rnaseq/MimRNAseq_fastq'
aligned2Mll='/sciclone/data10/dthomas01/rnaseq/aligned2Mll'

cd $rnaFastq

for i in *; do
    echo $i
    j=${i/.fastq/_aligned.sam} 
    echo $j
    #$hisat2/hisat2 -p 8 -x $mllHiSatInd"/mllInd" -U $i -S $aligned2Mll/$j 
    echo $aligned2Mll/$j
done

5491877

qstat 5491877

cd $aligned2Mll

## the multithreading is key, "-p 8". With the threads, these alignments are quick, 5-15 min each. 

## but not sure what % are aligning, etc... where is my stdout going?

## hopefully it will be in the final logs...

## here:


4956_S1_S26_L005_R1_001.fastq
34689923 reads; of these:
  34689923 (100.00%) were unpaired; of these:
    12012311 (34.63%) aligned 0 times
    13350403 (38.48%) aligned exactly 1 time
    9327209 (26.89%) aligned >1 times
65.37% overall alignment rate

4956_S2_S27_L005_R1_001.fastq
42252108 reads; of these:
  42252108 (100.00%) were unpaired; of these:
    8300231 (19.64%) aligned 0 times
    23623041 (55.91%) aligned exactly 1 time
    10328836 (24.45%) aligned >1 times
80.36% overall alignment rate

4956_S3_S28_L005_R1_001.fastq
47528395 reads; of these:
  47528395 (100.00%) were unpaired; of these:
    9437199 (19.86%) aligned 0 times
    26729022 (56.24%) aligned exactly 1 time
    11362174 (23.91%) aligned >1 times
80.14% overall alignment rate

4956_S4_S29_L005_R1_001.fastq
46447830 reads; of these:
  46447830 (100.00%) were unpaired; of these:
    8606762 (18.53%) aligned 0 times
    26789583 (57.68%) aligned exactly 1 time
    11051485 (23.79%) aligned >1 times
81.47% overall alignment rate

4956_S5_S30_L005_R1_001.fastq
30707029 reads; of these:
  30707029 (100.00%) were unpaired; of these:
    7086435 (23.08%) aligned 0 times
    16737022 (54.51%) aligned exactly 1 time
    6883572 (22.42%) aligned >1 times
76.92% overall alignment rate

4956_S6_S31_L005_R1_001.fastq
48989597 reads; of these:
  48989597 (100.00%) were unpaired; of these:
    9337600 (19.06%) aligned 0 times
    28206252 (57.58%) aligned exactly 1 time
    11445745 (23.36%) aligned >1 times
80.94% overall alignment rate

4956_S7_S32_L005_R1_001.fastq
70189878 reads; of these:
  70189878 (100.00%) were unpaired; of these:
    12849144 (18.31%) aligned 0 times
    41001725 (58.42%) aligned exactly 1 time
    16339009 (23.28%) aligned >1 times
81.69% overall alignment rate

## the first sample is our naiandinus sample, so no surprise it
## didn't align well. 

## in the meantime, can some of these reads be annotated? 

## let's go with stringtie. Installation...

## binary off the site:

cd /sciclone/data10/dthomas01

wget http://ccb.jhu.edu/software/stringtie/dl/stringtie-1.3.5.Linux_x86_64.tar.gz

tar -xf stringtie-1.3.5.Linux_x86_64.tar.gz

## we need to sort these sams and convert to bam first. Do we have samtools?

## these need the hts library
## local install of hts, missing a library that you need for crams, I guess:

#git clone https://github.com/samtools/htslib.git
./configure --prefix=$PWD --disable-lzma
## so our binaries for the hts library are:
/sciclone/data10/dthomas01/htslib/bin

## do we need to add these to our path?


## the actual samtools:
#git clone https://github.com/samtools/samtools.git

## binaries are here:
/sciclone/data10/dthomas01/samtools/bin

export PATH=/sciclone/data10/dthomas01/samtools/bin:$PATH

## try sorting one of our sam files:

#!/usr/bin/env bash
#PBS -l walltime=8:00:00
#PBS -N sams2Bams
#PBS -l nodes=1:ppn=8

export PATH=/sciclone/data10/dthomas01/samtools/bin:$PATH

## sams are here:

sams='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/sam'
bams='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/bam'

for i in $sams/*; do
    echo $i
    j=${i/aligned.sam/aligned_sorted.bam}
    k=${j/sam/bam}
    samtools sort -@ 8 -o $k $i
    echo $k
done

###########################################################33

qstat 5492174

## i think that worked...
## the next step is to assemble the transcripts.. in stringtie

## we could use our gff here? is there are benefit to doing 
## this? I know very little about this gff file, so skip this 
## for the moment. 

#!/usr/bin/env bash
#PBS -l walltime=6:00:00
#PBS -N combineTrans
#PBS -l nodes=1:ppn=8

cd /sciclone/data10/dthomas01

export PATH=/sciclone/data10/dthomas01/stringtie:$PATH

bams='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/bam'
assembledTranscripts='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts'

for i in $bams/*; do
    echo $i
    j=$(basename ${i/aligned_sorted.bam/transcripts.gtf})
    k=$assembledTranscripts"/"$j
    stringtie -p 8 -o $k $i
    echo $k
done

qstat 5492536

## seems to be working. The next step is merge these, again
## using stringtie:


##################################
#!/usr/bin/env bash
#PBS -l walltime=6:00:00
#PBS -N combineTrans
#PBS -l nodes=1:ppn=8

export PATH=/sciclone/data10/dthomas01/stringtie:$PATH

assembledTranscripts='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts'

mergedTranscripts='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/mergedTranscripts.gtf'

mergelist='/sciclone/home20/dthomas01/mergelist.txt'

cd $assembledTranscripts

stringtie --merge -p 8 -o $mergedTranscripts $mergelist

##############

## mergelist.txt, a list of assembled transcripts to be combined 
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S1_S26_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S2_S27_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S3_S28_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S4_S29_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S5_S30_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S6_S31_L005_R1_001_transcripts.gtf
/sciclone/data10/dthomas01/rnaseq/aligned2Mll/assembledTranscripts/4956_S7_S32_L005_R1_001_transcripts.gtf

qsub combineTrans.sh

qstat 5492600

## seems to have worked. Check it out more closely tomorrow. 

## what's next? 

## there is a step for viewing some transcript statistics using an annotated genome
## to do this we need to install gffcompare

cd /sciclone/data10/dthomas01

## git repo here:

git clone https://github.com/gpertea/gffcompare.git



./configure --prefix=$PWD  ## no config file. Confused...

make release

## huh, not working. use intel compiler?

## csh
setenv CC icc


make release

## nope...ugh. 

## binaries somewhere?

wget http://ccb.jhu.edu/software/stringtie/dl/gffcompare-0.11.2.Linux_x86_64.tar.gz

## try these out:

qsub -I -l walltime=1:0:0 -l nodes=1:ppn=4
bash
export PATH="/sciclone/data10/dthomas01/gffcompare":$PATH
cd /sciclone/data10/dthomas01/
refGff='/sciclone/data10/dthomas01/rnaseq/Mimulus_luteus_complete_w_single_exons_standard_renamed_genes.gff'
assTrans='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/mergedTranscripts.gtf'

gffcompare $refGff $assTrans -G

## what can we learn from these statistics?

less $assTrans
 
wc -l $assTrans ## 401,144 lines

grep "transcript\b" $assTrans | wc -l ## 60,663 transcripts

## I guess to find the the sequences for these we have to 
## go back to our genome using 

## so we may have to find all genes of interest manually, 

## but we gotta do some more curation first. 

## how do we use our gffcompare table to review the quality of
## the transcript assembly?

## we can charge ahead and come back to this? 

## let's try the next step, maybe come back to this. 

## string tie can create transcript abundance tables for us:
## we go back to the individual sample alignments to 
## estimate their respective abundances

qsub -I -l walltime=1:0:0 -l nodes=1:ppn=4

## estimateAbund.sh

#######################################
#!/usr/bin/env bash
#PBS -l walltime=6:00:00
#PBS -N estimateAbund
#PBS -l nodes=1:ppn=8

export PATH=/sciclone/data10/dthomas01/stringtie:$PATH

cd /sciclone/data10/dthomas01/

assTrans='/sciclone/data10/dthomas01/rnaseq/aligned2Mll/mergedTranscripts.gtf'
bams="/sciclone/data10/dthomas01/rnaseq/aligned2Mll/bam"
abundances="/sciclone/data10/dthomas01/rnaseq/aligned2Mll/abundances"

for i in $bams/*; do 
    j=$(basename $i)
    k=${j/_aligned_sorted.bam/_abundances.gtf}
    l=$abundances/$k
    echo $i
    stringtie -e -B -p 8 -G $assTrans -o $l $i
    echo $l
done

#########################

qsub estimateAbund.sh

qstat 5494776

#qdel 5494767

ls -ltr $abundances

## seems to be working

find . -mmin -10

## are these files small enough to work with locally?

## let's use this tutorial for deseq2 and first visualizations

https://informatics.fas.harvard.edu/differential-expression-with-deseq2.html

## but we need to convert our gtf files from stringtie to 
## the dataframe that DESeq2 needs. 

## oh, and we need to install deseq2

## back on home computer

BiocManager::install('DESeq2')


## how do we convert the gtf files to csvs in the right format?

## the stringtie folks have a python2.7 script for getting the 
## raw reads and gene names into a format for deseq2...

## protect our originals..
cd /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/abundances
for i in *; do
    echo $i
    chmod 444 $i
done

cd /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq

## does it still work?

wget https://ccb.jhu.edu/software/stringtie/dl/prepDE.py

prepDE="/home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/prepDE.py"
abundances="/home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/abundances"

$prepDE -h

## sample_lst.txt
4956_S1_S26_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S1_S26_L005_R1_001_abundances.gtf
/home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/abundances/4956_S1_S26_L005_R1_001_abundances.gtf
4956_S2_S27_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S2_S27_L005_R1_001_abundances.gtf
4956_S3_S28_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S3_S28_L005_R1_001_abundances.gtf
4956_S4_S29_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S4_S29_L005_R1_001_abundances.gtf
4956_S5_S30_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S5_S30_L005_R1_001_abundances.gtf
4956_S6_S31_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S6_S31_L005_R1_001_abundances.gtf
4956_S7_S32_L005_R1_001 /home/daniel/Documents/cooley_lab/MimulusLuteus_RNAseq/4956_S7_S32_L005_R1_001_abundances.gtf

$prepDE -i sample_lst.txt

## can R read this?

R

library('DESeq2')
library('RColorBrewer')

transCounts <- read.csv('transcript_count_matrix.csv')
rownames(transCounts) <- transCounts$transcript_id
transCounts$transcript_id <- NULL
colnames(transCounts) <- c( "MnaWT", "MlvWT1", "MlvWT2", "MlvWT3", "Vr1-1a", "Vr1-3a", "Vr1-5")

condition <- factor(c('MnaWT','WT','WT','WT','RNAi','RNAi','RNAi'))

colData <- data.frame(row.names=colnames(transCounts), condition)



## okay, where were we?
## we need a sample metadata dataframe, rownames are samples, colname is condition, cells are 
## 

dataset <- DESeqDataSetFromMatrix(countData = transCounts,
                                  colData = colData,
                                  design = ~condition)


dds <- DESeq(dataset)

result <- results(dds, contrast=c('condition','RNAi','WT'))

## how many NA's in there?

all(complete.cases(result)) ## nope

dim(result) ##60663 rows (transcripts)

sum(complete.cases(result)) ## 59056 rows

## subset to just these:
result <- result[complete.cases(result),] 

summary(result)

n = 50
resOrdered <- result[order(result$padj),]

topResults <- rbind( resOrdered[ resOrdered[,'log2FoldChange'] > 0, ][1:n,], 
                    resOrdered[ resOrdered[,'log2FoldChange'] < 0, ][n:1,] )

## get the top five positive results and top five negative fold change
topResults[c(1:5,(2*n-4):(2*n)), c('baseMean','log2FoldChange','padj')]

DataFrame with 10 rows and 3 columns
                      baseMean    log2FoldChange                  padj
                     <numeric>         <numeric>             <numeric>
MSTRG.22369.2 808.408049265504  4.97349335711349 3.05783218191832e-231
MSTRG.10389.1 210.300750645409  2.11990117751604  1.02462938784332e-60
MSTRG.18771.1  79.304947768443  4.71856708983969  1.46554719251551e-38
MSTRG.8228.2  428.247327578308  3.05814417141936   6.3391652694216e-30
MSTRG.23612.1 535.660504583424   1.1377477945568  4.97546278960707e-28

MSTRG.16681.2  164.92961687344 -2.46818749285691  4.60887571672833e-22
MSTRG.10536.1  447.27018080416 -10.9125241357172  7.04505851791907e-25
MSTRG.1459.2  62.8324902591117 -5.92580139853354  7.04505851791907e-25
MSTRG.35081.3 125.056631316517 -5.99527842655793  1.28302650522368e-44
MSTRG.22369.1 1072.51388274813 -1.58373854296801  8.23160552817666e-74


## neat. Wish I knew what these were. Go through the graphics, then 
## start figuring out what they are. 

DESeq2::plotMA(result, main='', ylim=c(-2,2))

rld <- rlogTransformation(dds, blind=TRUE)


plotPCA(rld)

## interesting, but our Mna is throwing things off. Rerun the above without it?

###################### exclude Mna ##########################

## make a df of transcript abundances without Mna:
transCounts <- read.csv('transcript_count_matrix.csv')
rownames(transCounts) <- transCounts$transcript_id
transCounts$transcript_id <- NULL
colnames(transCounts) <- c( "MnaWT", "MlvWT1", "MlvWT2", "MlvWT3", "Vr1-1a", "Vr1-3a", "Vr1-5")
transCounts$MnaWT <- NULL
## new metadata:
condition <- factor(c('WT','WT','WT','RNAi','RNAi','RNAi'))
colData <- data.frame(row.names=colnames(transCounts), condition)
## the rest should be the same:
dataset <- DESeqDataSetFromMatrix(countData = transCounts,
                                  colData = colData,
                                  design = ~condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition','RNAi','WT'))

## how many NA's in there?
dim(result) ##60663 rows (transcripts)
sum(complete.cases(result)) ## 56499 rows, 
## makes sense, we took out all the ones unique to naiandinus
## subset to just these:
result <- result[complete.cases(result),] 

summary(result) 

n = 50
resOrdered <- result[order(result$padj),]
topResults <- rbind( resOrdered[ resOrdered[,'log2FoldChange'] > 0, ][1:n,], 
                    resOrdered[ resOrdered[,'log2FoldChange'] < 0, ][n:1,] )

## get the top five positive results and top five negative fold change
topResults[c(1:5,(2*n-4):(2*n)), c('baseMean','log2FoldChange','padj')]

                      baseMean    log2FoldChange                  padj
                     <numeric>         <numeric>             <numeric>
MSTRG.22369.2 814.146546928579  4.97604228594277 2.60170561083407e-164
MSTRG.10389.1 258.334129805738  2.12480593969706  6.18833008812639e-51
MSTRG.18771.1   106.4966317714  4.72536387399828  8.20027800966372e-36
MSTRG.8228.2  442.390287599968  3.06370210844173  1.72410437851371e-24
MSTRG.14389.3 271.426760012938  3.17190193926194  2.52687272135201e-23

MSTRG.32844.3 264.701442504338 -11.4743123211698  2.23417283046055e-18
MSTRG.1459.2  84.8556019172276 -5.92299780622723  5.79492419163712e-23
MSTRG.10536.1 604.102956038344 -10.9058507515376  1.82466684442044e-24
MSTRG.35081.3 168.933018446597 -5.99073448074947  9.98137022154089e-41
MSTRG.22369.1 1398.79313288278 -1.57996227149425  2.09490775948335e-56

## mostly the same, as before
## at least for the top 4 transcripts

DESeq2::plotMA(result, main='', ylim=c(-2,2))

png("overallMAplot.png", width=600)
DESeq2::plotMA(result, main='', ylim=c(-4,4))
dev.off()

DESeq2::plotMA(result, main='')

rld <- rlogTransformation(dds, blind=TRUE)

rld.pca <- prcomp(rld)

png('overallTransPCA.png')
plotPCA(rld)
dev.off()

## how do we get our loadings, etc, to figure out what's important here?
## not sure

## but we can look at some individual genes here:
plotCounts(dds, gene=which.min(result$padj), intgroup="condition")

plotCounts(dds, gene="MSTRG.22369.2", intgroup="condition")

## our most important upregged transcript is:
MSTRG.22369.2

resOrderedbychange <- result[order(result$log2FoldChange),]
topResultsbyChange <- rbind( resOrderedbychange[1:5,],  
        resOrderedbychange[nrow(resOrderedbychange)-5:nrow(resOrderedbychange),])
topResultsbyChange

topResultsbyChange[c(1:5,(2*n-4):(2*n)), c('baseMean','log2FoldChange','padj')]

topResults[c(1:5,(2*n-4):(2*n)), c('baseMean','log2FoldChange','padj')]


## looked at this way (foldchange), and not by pvalue...
## our main downreg is MSTRG.7537.1 :

plotCounts(dds, gene="MSTRG.7537.1", intgroup="condition")

## but the story there is confusing, one WT sample is expressed
## at the same low level as the transformed samples

## huh, same here:
plotCounts(dds, gene="MSTRG.7925.4", intgroup="condition")

## so maybe it is best to go by statistical confidence, to find the clearer
## stories?

svg("MSTRG.22369.1.svg")
plotCounts(dds, gene="MSTRG.22369.1", intgroup="condition")
dev.off()




hmcol <- brewer.pal(11,'RdBu')
nCounts <- counts(dds, normalized=TRUE)
## that's a good way to get our normalized counts out, for pcas?

#rld <- rlogTransformation(dds, blind=TRUE)

aa <- counts(rld)

str(rld)


png("heatmap.png")
heatmap(as.matrix(nCounts[ row.names(topResults), ]), Rowv = NA, col = hmcol, mar = c(8,2))
dev.off()


data(iris)
head(iris, 3)

# log transform 
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir,
                 center = TRUE,
                 scale. = TRUE)

## tomorrow - how do we annotate our transcripts?


